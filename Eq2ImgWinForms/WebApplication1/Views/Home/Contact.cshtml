@{
    ViewBag.Title = "Contact";
}
<h2>@ViewBag.Title.</h2>
<h3>@ViewBag.Message</h3>

<address>
    One Microsoft Way<br />
    Redmond, WA 98052-6399<br />
    <abbr title="Phone">P:</abbr>
    425.555.0100
</address>

<address>
    <strong>Support:</strong>   <a href="mailto:Support@example.com">Support@example.com</a><br />
    <strong>Marketing:</strong> <a href="mailto:Marketing@example.com">Marketing@example.com</a>
</address>
 @*<script type="text/javascript">

     function convert_to_unicode() {

         var array_one = new Array(">", "$", "[", "p", "“", "”",                  //06
         "µH", "™", "˜", "µJ", "µO", "µS", "µT", "µ\\",                                //08
         "ª", "£", "¤", "u", "v", "}", "]",						//07
         "›", "@", "&", "\"", "'",                        		                  //05
         "ú", "j", "k", "l", "Ì", "Í", "Î",                        		            //07
         "®", "¯", "é", "ê",                        		                        //04

         "#", "‚", "ƒ", "„", "†", "‡", "ˆ", "‰",                        		      //08
         "’", "“", "”", "•", "¬", "–", "—", "œ",                        		      //08
         "³", "¶", "¸", "¹", "º", "¼", "Ã", "¾", "Å", "Æ", "Ç", "È", "É",             //13
         "Ð", "Ñ", "Ò", "Ó", "Ô", "Õ", "Ö", "×", "Ø", "Ù", "Ú", "Û", "Þ", "à", "á", "ï", "ð",    //17
         "ò", "ó", "õ", "ö", "÷", "ø", "ü", "ý",                           	//08
         "ç", "Œ", "´", "«",                       		                  //04

         "Š", "»", "½", "¿", "H", "I", "J", "K", "L",                                   //09
         "À", "Á", "Â", "Ä", "M", "N", "O", "P",                                        //08
         "Q", "R", "S", "T", "Ê", "U",                        		            //06
         "Ë", "Ï", "Ü", "Ý", "V", "W", "X", "Y", "Z",                       	      //09
         "ß", "â", "ã", "ä", "å", "n", "\\", "~", "^", "_",                        	//10

         "æ", "ë", "ì", "í", "î", "ù", "û", "ñ", "ô",                               //09
         "`", "a", "b", "c", "d", "e", "f", "g", "h", "i",                        		//10

         "Am¡", "Amo", "Am°", "Am", "A", "B©", "B", "C", "D", "F", "G", "Eo", "E",           //13


         "m", "r", "s", "t", "w", "x", "y", "z", "¥", "¦", "|", "o", "¡", "¢", "…", "§", "¨", "µ", //18
         "þ", "ÿ", "°", "±", "²",                                                       //05

         "0", "1", "2", "3", "4", "5", "6", "7", "8", "9",

         "्ा", "्ो", "्ौ", "अो", "अा", "आै", "आे", "ाो", "ाॅ", "ॅा", "ाे",
         "ंु", "ेे", "अै", "ाे", "अे", "ंा", "अॅ", "ाै", "ैा", "ंृ",
         "ँा", "ँू", "ेा", "ंे", "ाें", "ॅं", "ंॅ", " ः", "ंू")     // Remove typing mistakes in the original file

         var array_two = new Array("", "", "{", "{", "\"", "'",
         "क़", "ख़्", "ख़", "ग़", "ज़", "ड़", "ढ़", "फ़", // one-byte varnas
         "ं©", "ै©", "ैं©", "ी©", "ीं©", "े©", "ें©",
         "ॐ", "ऽ", "।", "‘", "’",
         "क्ष्", "क्ष", "ज्ञ", "श्र", "त्र", "त्र्", "त्त्",
         "्रु", "्रू", "रु", "रू",

         "ञ्च्", "ज्ज्", "च्च", "ल्ल", "ह्ण", "ह्ल", "ह्व", "्व",
         "ङ्क", "ङ्ख", "ङ्ग", "ङ्घ", "ङ्क्ष", "ह्न", "ड्ढ", "श्व",
         "्न", "ङ्म", "क्क", "क्व", "क्त", "ख्र", "झ्र", "ग्न", "ट्ट", "ट्ठ", "ठ्ठ", "ड्ड", "ड्ढ",
         "द्र", "दृ", "द्ग", "द्घ", "द्द", "द्ध", "द्न", "द्ब", "द्भ", "द्म", "द्य", "द्व", "न्न", "प्र", "प्त", "ष्ट", "ष्ठ",
         "स्र", "स्त्र", "ह्र", "हृ", "ह्म", "ह्य", "श्च", "श्न",
         "्य", "्र", "्र", "्र",

         "क्", "ख्", "ग्", "घ्", "क", "ख", "ग", "घ", "ङ",
         "च्", "ज्", "झ्", "ञ्", "च", "छ", "ज", "झ",
         "ट", "ठ", "ड", "ढ", "ण्", "ण",
         "त्", "थ्", "ध्", "न्", "त", "थ", "द", "ध", "न",
         "प्", "फ्", "ब्", "भ्", "म्", "प", "फ", "ब", "भ", "म",

         "य्", "ल्", "व्", "श्", "ष्", "ळ्", "श्", "स्", "ह्",
         "य", "र", "ल", "ल", "व", "श", "ष", "स", "ह", "ळ",

         "औ", "ओ", "ऑ", "आ", "अ", "ई", "इ", "उ", "ऊ", "ऋ", "ॠ", "ऐ", "ए",

         "ा", "ी", "ी", "ीं", "ु", "ु", "ू", "ू", "ृ", "ॄ", "ें", "े", "ै", "ैं", "ः", "ं", "ं", "़",
         "ु", "ू", "ॅ", "ँ", "्",

         "०", "१", "२", "३", "४", "५", "६", "७", "८", "९",

         "", "े", "ै", "ओ", "आ", "औ", "ओ", "ो", "ॉ", "ॉ", "ो",
         "ुं", "े", "अ‍ै", "ो", "अ‍े", "ां", "अ‍ॅ", "ौ", "ौ", "ृं",
         "ाँ", "ूँ", "ो", "ें", "ों", "ँ", "ँ", " :", "ूं")     // Remove typing mistakes in the original file

         //**************************************************************************************
         //
         // Punctuation marks incorporated at the end
         //
         //**************************************************************************************
         // The following two characters are to be replaced through proper checking of locations:
         //**************************************************************************************
         //   "{",
         //   "ि",
         //
         //   "©",
         //   "र्" (reph)
         //
         //**************************************************************************************

         var array_one_length = array_one.length;

         var modified_substring = document.getElementById("legacy_text").value;

         Replace_Symbols();

         processed_text = modified_substring;

         document.getElementById("unicode_text").value = processed_text;

         // --------------------------------------------------


         function Replace_Symbols() {

             //substitute array_two elements in place of corresponding array_one elements

             if (modified_substring != "")  // if stringto be converted is non-blank then no need of any processing.
             {
                 for (input_symbol_idx = 0; input_symbol_idx < array_one_length; input_symbol_idx++) {

                     //  alert(" modified substring = "+modified_substring)

                     //***********************************************************
                     // if (input_symbol_idx==106)
                     //  { alert(" input_symbol_idx = "+input_symbol_idx);
                     //    alert(" input_symbol_idx = "+input_symbol_idx)
                     //; alert(" character =" + modified_substring.CharCodeAt(input_symbol_idx))
                     //     alert(" character = "+modified_string.fromCharCode(input_symbol_idx))
                     //   }
                     // if (input_symbol_idx == 107)
                     //   { alert(" input_symbol_idx = "+input_symbol_idx);
                     //    alert(" character = ",+string.fromCharCode(input_symbol_idx))
                     //   }
                     //***********************************************************
                     idx = 0;  // index of the symbol being searched for replacement

                     while (idx != -1) //while-00
                     {

                         modified_substring = modified_substring.replace(array_one[input_symbol_idx], array_two[input_symbol_idx])
                         idx = modified_substring.indexOf(array_one[input_symbol_idx])

                     } // end of while-00 loop
                     // alert(" end of while loop")
                 } // end of for loop
                 // alert(" end of for loop")

                 // alert(" modified substring2 = "+modified_substring)
                 //*******************************************************
                 var position_of_i = modified_substring.indexOf("{")

                 while (position_of_i != -1)  //while-02
                 {
                     var charecter_next_to_i = modified_substring.charAt(position_of_i + 1)
                     var charecter_to_be_replaced = "{" + charecter_next_to_i
                     modified_substring = modified_substring.replace(charecter_to_be_replaced, charecter_next_to_i + "ि")
                     position_of_i = modified_substring.search(/{/, position_of_i + 1) // search for i ahead of the current position.

                 } // end of while-02 loop

                 //**********************************************************************************
                 // End of Code for Replacing four Special glyphs
                 //**********************************************************************************

                 // following loop to eliminate 'chhotee ee kee maatraa' on half-letters as a result of above transformation.

                 var position_of_wrong_ee = modified_substring.indexOf("ि्")

                 while (position_of_wrong_ee != -1)  //while-03

                 {
                     var consonent_next_to_wrong_ee = modified_substring.charAt(position_of_wrong_ee + 2)
                     var charecter_to_be_replaced = "ि्" + consonent_next_to_wrong_ee
                     modified_substring = modified_substring.replace(charecter_to_be_replaced, "्" + consonent_next_to_wrong_ee + "ि")
                     position_of_wrong_ee = modified_substring.search(/ि्/, position_of_wrong_ee + 2) // search for 'wrong ee' ahead of the current position.

                 } // end of while-03 loop

                 // following loop to eliminate 'chhotee ee kee maatraa' on half-letters as a result of above transformation.

                 var position_of_wrong_ee = modified_substring.indexOf("िं्")

                 while (position_of_wrong_ee != -1)  //while-03

                 {
                     var consonent_next_to_wrong_ee = modified_substring.charAt(position_of_wrong_ee + 3)
                     var charecter_to_be_replaced = "िं्" + consonent_next_to_wrong_ee
                     modified_substring = modified_substring.replace(charecter_to_be_replaced, "्" + consonent_next_to_wrong_ee + "िं")
                     position_of_wrong_ee = modified_substring.search(/िं्/, position_of_wrong_ee + 3) // search for 'wrong ee' ahead of the current position.

                 } // end of while-03 loop


                 // Eliminating reph "Ô" and putting 'half - r' at proper position for this.
                 set_of_matras = "ा ि ी ु ू ृ े ै ो ौ ं : ँ ॅ"
                 var position_of_R = modified_substring.indexOf("©")

                 while (position_of_R > 0)  // while-04
                 {
                     probable_position_of_half_r = position_of_R - 1;
                     var charecter_at_probable_position_of_half_r = modified_substring.charAt(probable_position_of_half_r)


                     // trying to find non-maatra position left to current O (ie, half -r).

                     while (set_of_matras.match(charecter_at_probable_position_of_half_r) != null)  // while-05

                     {
                         probable_position_of_half_r = probable_position_of_half_r - 1;
                         charecter_at_probable_position_of_half_r = modified_substring.charAt(probable_position_of_half_r);

                     } // end of while-05


                     charecter_to_be_replaced = modified_substring.substr(probable_position_of_half_r, (position_of_R - probable_position_of_half_r));
                     new_replacement_string = "र्" + charecter_to_be_replaced;
                     charecter_to_be_replaced = charecter_to_be_replaced + "©";
                     modified_substring = modified_substring.replace(charecter_to_be_replaced, new_replacement_string);
                     position_of_R = modified_substring.indexOf("©");

                 } // end of while-04

                 //**********punctuation marks ****************
                 //    "¡","£","¤","¥","²","³","´","µ","¹","À","Á","Â","Ã","Ä","Å","Æ","Ç","È","Ê","Ñ","Ò","Õ",
                 // "{","}","[","]","!","(",")","*","-","/",":",";","<","=",">","?","@","|",",","!","\\","√","-",

                 //modified_substring = modified_substring.replace( /¡/g , "{" )   ;

             } // end of IF  statement  meant to  supress processing of  blank  string.

         } // end of the function  Replace_Symbols

     } // end of convert_to_unicode function


     //*******************************************************************************
     function convert_to_Shreedev0702() {
         var array_one = new Array("–",
         "के", "ङे", "छे", "टे", "ठे", "डे", "ढे", "ळे", "हे", "ऊँ",
         "क़", "ख़", "ग़", "ज़", "ड़", "ढ़", "फ़", // one-byte varnas               //07
         //"ं©",  "ै©","ैं©","ी©","ीं©", "े©", "ें©",
         "ॐ", "ऽ", "।", "‘", "’",                                          //05
         "क्ष्", "क्ष", "ज्ञ", "श्र", "त्र", "त्र्", "त्त", "त्त्",                                   //07
         "्रु", "्रू", "रु", "रू",                                           //04

         "ञ्च्", "ज्ज्", "च्च", "ल्ल", "ह्ण", "ह्ल", "ह्व", //"्व",                           //08
         "ङ्क", "ङ्ख", "ङ्ग", "ङ्घ", "ङ्क्ष", "ह्न", "ड्ढ", "श्व",                          //08
         "ङ्म", "क्क", "क्व", "क्त", "ख्र", "झ्र", "ग्न", "ट्ट", "ट्ठ", "ठ्ठ", "ड्ड", "ड्ढ",  //13 "्न",
         "द्र", "दृ", "द्ग", "द्घ", "द्द", "द्ध", "द्न", "द्ब", "द्भ", "द्म", "द्य", "द्व", "न्न", "प्र", "प्त", "ष्ट", "ष्ठ",     //17
         "स्र", "स्त्र", "ह्र", "हृ", "ह्म", "ह्य", "श्च", "श्न",                         //08

         "छ्र", "ट्र", "ड्र", "ढ्र",                                             //04
          "्र",                                                //02

         "क्", "ख्", "ग्", "घ्", "क", "ख", "ग", "घ", "ङ",                           //09
         "च्", "ज्", "झ्", "ञ्", "च", "छ", "ज", "झ",                               //08
         "ट", "ठ", "ड", "ढ", "ण्", "ण",                                       //06
         "त्", "थ्", "ध्", "न्", "त", "थ", "द", "ध", "न",                            //09
         "प्", "फ्", "ब्", "भ्", "म्", "प", "फ", "ब", "भ", "म",                         //10

         "य्", "ल्", "व्", "श्", "ष्", "ळ्", "श्", "स्", "ह्",                         //09
         "य", "र", "ल", "ल", "व", "श", "ष", "स", "ह", "ळ",                          //10
         "्य",
         "औ", "ओ", "ऑ", "आ", "अ", "ई", "इ", "उ", "ऊ", "ऋ", "ॠ", "ऐ", "ए",              //13

         "ौ", "ो", "ॉ", "ा", "ी", "ु", "ू", "ृ", "ॄ", "े", "ै", "ँ", "ं", "ः", "्", "ॅ", "़",    //17

         "०", "१", "२", "३", "४", "५", "६", "७", "८", "९")

         var array_two = new Array("-",//"$","[", "p",                                //03
         "Ho$", "Lo>", "No>", "Qo>", "Ro>", "So>", "To>", "io>", "ho>", "D±$",
         "µH$", "™", "µJ", "µO", "µS>", "µT>", "µ\\>",                                     //07
         //"ª",   "£","¤", "u", "v",      "}", "]",					//07
         "›", "@", "&", "\"", "'",                        		                  //05
         "ú", "j", "k", "l", "Ì", "Í", "Îm", "Î",                       		      //07
         "®", "¯", "é", "ê",                        		                        //04

         "#", "‚", "ƒ", "„", "†", "‡", "ˆ",  // "‰",                      		      //08
         "’>", "“", "”", "•", "¬", "–", "—", "œ",                        		      //08
         "¶", "¸$", "¹", "º$", "¼", "Ã", "¾", "Å", "Æ", "Ç", "È", "É",             //13 "³",
         "Ð", "Ñ", "Ò", "Ó", "Ô", "Õ", "Ö", "×", "Ø", "Ù", "Ú", "Û", "Þ", "à", "á", "ï", "ð",    //17
         "ò", "ó", "õ", "ö", "÷", "ø", "ü", "ý",                           	//08

         "N—>", "Q—>", "S—>", "T—>",                                                    //04
           "«",                       		                              //02

         "Š", "»", "½", "¿", "H$", "I", "J", "K", "L>",                                   //09
         "À", "Á", "Â", "Ä", "M", "N>", "O", "P",                                        //08
         "Q>", "R>", "S>", "T>", "Ê", "U",                        		            //06
         "Ë", "Ï", "Ü", "Ý", "V", "W", "X", "Y", "Z",                       	      //09
         "ß", "â", "ã", "ä", "å", "n", "\\$", "~", "^", "_",                        	//10

         "æ", "ë", "ì", "í", "î", "ù", "û", "ñ", "ô",                               //09
         "`", "a", "b", "c", "d", "e", "f", "g", "h>", "i>",                        		//10

         "ç",

         "Am¡", "Amo", "Am°", "Am", "A", "B©", "B", "C", "D$", "F", "G", "Eo", "E",           //13

         "m¡", "mo", "m°", "m", "r", "w", "y", "¥", "¦", "o", "¡", "±", "§", "…", "²", "°", "µ",  //17

         "0", "1", "2", "3", "4", "5", "6", "7", "8", "9")

         //************************************************************
         //Put "Enter chunk size:" line before "<textarea name= ..." if required to be used.
         //************************************************************
         //Enter chunk size: <input type="text" name="chunksize" value="6000" size="7" maxsize="7" style="text-align:right"><br/><br/>
         //************************************************************
         //   "{",
         //   "ि",
         //
         //   "©",
         //   "र्" (reph)
         //
         //**************************************************************************************

         var array_one_length = array_one.length;

         var modified_substring = document.getElementById("unicode_text").value;

         Replace_Symbols();

         processed_text = modified_substring;

         document.getElementById("legacy_text").value = processed_text;


         //**************************************************

         function Replace_Symbols() {

             // if string to be converted is non-blank then no need of any processing.
             if (modified_substring != "") {

                 // first replace the two-byte nukta_varNa with corresponding one-byte nukta varNas.

                 // modified_substring = modified_substring.replace ( /क़/ , "क़" )  ;
                 // modified_substring = modified_substring.replace ( /ख़‌/g , "ख़" )  ;
                 // modified_substring = modified_substring.replace ( /ग़/g , "ग़" )  ;
                 // modified_substring = modified_substring.replace ( /ज़/g , "ज़" )  ;
                 // modified_substring = modified_substring.replace ( /ड़/g , "ड़" )  ;
                 // modified_substring = modified_substring.replace ( /ढ़/g , "ढ़" )  ;
                 // modified_substring = modified_substring.replace ( /ऩ/g , "ऩ" )  ;
                 // modified_substring = modified_substring.replace ( /फ़/g , "फ़" )  ;
                 // modified_substring = modified_substring.replace ( /य़/g , "य़" )  ;
                 // modified_substring = modified_substring.replace ( /ऱ/g , "ऱ" )  ;


                 // code for replacing "ि" (chhotee ee kii maatraa) with "{"  and correcting its position too.

                 var position_of_f = modified_substring.indexOf("ि");
                 while (position_of_f != -1)  //while-02
                 {
                     var character_left_to_f = modified_substring.charAt(position_of_f - 1);
                     modified_substring = modified_substring.replace(character_left_to_f + "ि", "{" + character_left_to_f);

                     position_of_f = position_of_f - 1;

                     while ((modified_substring.charAt(position_of_f - 1) == "्") & (position_of_f != 0)) {
                         var string_to_be_replaced = modified_substring.charAt(position_of_f - 2) + "्";
                         modified_substring = modified_substring.replace(string_to_be_replaced + "{", "{" + string_to_be_replaced);

                         position_of_f = position_of_f - 2;
                     }
                     position_of_f = modified_substring.search(/ि/, position_of_f + 1); // search for f ahead of the current position.

                 } // end of while-02 loop
                 //************************************************************
                 // Eliminating "र्" and putting  Z  at proper position for this.

                 set_of_matras = "ािीुूृेैोौं:ँॅ"

                 modified_substring += '  ';  // add two spaces after the string to avoid UNDEFINED char in the following code.

                 //     modified_substring = modified_substring.replace ( /-/g , "¹" )  ;
                 //     modified_substring = modified_substring.replace ( /श्र्/g , "E" )  ;
                 //     modified_substring = modified_substring.replace ( /त्र्य/g , "~\\ya" )  ;

                 var space = " "
                 var position_of_half_R = modified_substring.indexOf("र्");

                 //  alert(" 21. position_of_half_R = " + position_of_half_R);

                 //************************************************************************************
                 while (position_of_half_R > 0)  // while-03
                 {
                     // "र्"  is two bytes long
                     var probable_position_of_Z = position_of_half_R + 2;
                     var character_at_probable_position_of_Z = modified_substring.charAt(probable_position_of_Z)

                     // alert(" 3. probable_position_of_Z = "+probable_position_of_Z );
                     // alert(" 4. character_at_probable_position_of_Z = "+character_at_probable_position_of_Z );

                     // trying to find non-maatra position right to probable_position_of_Z .

                     while (set_of_matras.match(character_at_probable_position_of_Z) != null) // while-04
                     {
                         probable_position_of_Z = probable_position_of_Z + 1;
                         character_at_probable_position_of_Z = modified_substring.charAt(probable_position_of_Z);

                         // alert(" 5. probable_position_of_Z = "+probable_position_of_Z );
                         // alert(" 6. character_at_probable_position_of_Z = "+character_at_probable_position_of_Z );
                     } // end of while-04
                     //************************************************************
                     // check if the next character is a halant
                     //************************************************************
                     var right_to_position_of_Z = probable_position_of_Z + 1;
                     // alert(" 7. right_to_position_of_Z = "+right_to_position_of_Z );

                     if (right_to_position_of_Z > 0)  // if-03
                     {
                         var character_right_to_position_of_Z = modified_substring.charAt(right_to_position_of_Z)
                         // alert(" 8. character_right_to_position_of_Z = "+character_right_to_position_of_Z );
                         //    while ("्".match( character_right_to_position_of_Z ) != null ) // while-05

                         while (character_right_to_position_of_Z == "्") // while-05
                         {
                             //       halant found, move to next character
                             probable_position_of_Z = right_to_position_of_Z + 1;
                             character_at_probable_position_of_Z = modified_substring.charAt(probable_position_of_Z);

                             // alert(" 9. probable_position_of_Z = "+probable_position_of_Z );
                             // alert("10. character_at_probable_position_of_Z = "+character_at_probable_position_of_Z );

                             right_to_position_of_Z = probable_position_of_Z + 1;
                             character_right_to_position_of_Z = modified_substring.charAt(right_to_position_of_Z)

                             // alert("11. right_to_position_of_Z = "+right_to_position_of_Z );
                             // alert("12. character_right_to_position_of_Z = "+character_right_to_position_of_Z );
                         } // end of while-05

                         // alert("121. position_of_half_R = "+position_of_half_R);
                         // alert("122. probable_position_of_Z = "+probable_position_of_Z);

                     } // end of if-03
                     //************************************************************

                     string_to_be_replaced = modified_substring.substr(position_of_half_R + 2, (probable_position_of_Z - position_of_half_R) - 1);
                     //************************************************************
                     //     check if character_right_to_position_of_Z is a space
                     //       if (space.match(character_right_to_position_of_Z) != null)
                     //       {
                     //          string_to_be_replaced = string_to_be_replaced.substr(0,string_to_be_replaced.length - 1)
                     //        alert("13. string_to_be_replaced = "+string_to_be_replaced );
                     //        alert("14. string_to_be_replaced.length ="+string_to_be_replaced.length);
                     //       }
                     modified_substring = modified_substring.replace("र्" + string_to_be_replaced, string_to_be_replaced + "©");

                     //     alert("15. string_to_be_replaced = "+string_to_be_replaced );
                     //     alert("16. modified_substring = "+modified_substring );
                     position_of_half_R = modified_substring.indexOf("र्");
                     //      alert("17. position_of_half_R = "+position_of_half_R )

                 } // end of while-03
                 //***********************************************************

                 modified_substring = modified_substring.substr(0, modified_substring.length - 2);


                 //substitute array_two elements in place of corresponding array_one elements

                 for (input_symbol_idx = 0; input_symbol_idx < array_one_length; input_symbol_idx++) {
                     idx = 0;  // index of the symbol being searched for replacement

                     while (idx != -1) //whie-00
                     {
                         modified_substring = modified_substring.replace(array_one[input_symbol_idx], array_two[input_symbol_idx])
                         idx = modified_substring.indexOf(array_one[input_symbol_idx])
                     } // end of while-00 loop
                 } // end of for loop

             } // end of IF  statement  meant to  supress processing of  blank  string.
             //      modified_substring = modified_substring.replace ( /-ao/g , "ao-" )
             //      modified_substring = modified_substring.replace ( /-a/g , "a-" )
             //      modified_substring = modified_substring.replace ( /-I/g , "I-" )
             //      modified_substring = modified_substring.replace ( /\ -/g , "\-" )
             //      modified_substring = modified_substring.replace ( /ki,/g , "ik," )
             //      modified_substring = modified_substring.replace ( /Ki,/g , "iÓ" )
             //      modified_substring = modified_substring.replace ( /gai,/g , "iga," )
             //      modified_substring = modified_substring.replace ( /fi,/g , "iÔ" )
             //      modified_substring = modified_substring.replace ( /Di,/g , "iD," )
             //      modified_substring = modified_substring.replace ( /Zi,/g , "iZ," )
             //      modified_substring = modified_substring.replace ( /jai,/g , "ija," )
             //      modified_substring = modified_substring.replace ( /nai,/g , "ina," )
             //      modified_substring = modified_substring.replace ( /ri,/g , "ir," )
             //      modified_substring = modified_substring.replace ( /Li,/g , "iL," )


         } // end of the function  Replace_Symbols( )

     } // end of convert_to_Shusha function


</script>*@